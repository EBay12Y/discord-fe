// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id         String   @id @default(uuid())
  userId     String   @unique
  name       String
  email      String   @unique
  profileUrl String   @db.Text
  servers    Server[]
  members    Member[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Server {
  id                String            @id @default(uuid())
  name              String
  imageUrl          String            @db.Text
  inviteCode        String            @unique
  channelCategories ChannelCategory[]
  channels          Channel[]

  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id])

  members Member[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([ownerId])
}

model ChannelCategory {
  id   String @id @default(uuid())
  name String

  serverId String
  server   Server    @relation(fields: [serverId], references: [id], onDelete: Cascade)
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([serverId])
}

enum ChannelType {
  TEXT
  VOICE
}

model Channel {
  id         String           @id @default(uuid())
  name       String
  type       ChannelType
  serverId   String 
  server     Server           @relation(fields: [serverId], references: [id], onDelete: Cascade) 
  categoryId String?
  category   ChannelCategory? @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([serverId])
  @@index([categoryId])
}

enum MembershipRole {
  OWNER
  ADMIN
  MEMBER
  GUEST
}

model Member {
  id       String         @id @default(uuid())
  role     MembershipRole @default(MEMBER)
  userId   String
  user     User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  serverId String
  server   Server         @relation(fields: [serverId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([serverId])
}
