// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String @id @default(uuid())
  name           String
  email          String @unique
  provider       String
  providerUserId String @map("provider_user_id") @unique

  profileUrl       String          @map("profile_url") @db.Text
  servers          Server[]
  members          Member[]
  sentMessages     DirectMessage[] @relation("sender")
  conversations    Conversation[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model Server {
  id                String            @id @default(uuid())
  name              String            @map("name")
  imageUrl          String            @map("image_url") @db.Text
  inviteCode        String            @unique @map("invite_code")
  channelCategories ChannelCategory[]
  channels          Channel[]

  ownerId String @map("owner_id")
  owner   User   @relation(fields: [ownerId], references: [id])

  members Member[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([ownerId])
  @@map("servers")
}

model ChannelCategory {
  id   String @id @default(uuid())
  name String

  serverId String    @map("server_id")
  order    Int       @default(0)
  server   Server    @relation(fields: [serverId], references: [id], onDelete: Cascade)
  channels Channel[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([serverId])
  @@map("channel_categories")
}

enum ChannelType {
  TEXT
  VOICE
}

model Channel {
  id         String           @id @default(uuid())
  name       String
  type       ChannelType
  serverId   String           @map("server_id")
  server     Server           @relation(fields: [serverId], references: [id], onDelete: Cascade)
  categoryId String?          @map("category_id")
  order      Int              @default(0)
  category   ChannelCategory? @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  messages   Message[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([serverId])
  @@index([categoryId])
  @@map("channels")
}

enum MembershipRole {
  OWNER
  ADMIN
  MEMBER
  GUEST
}

model Member {
  id       String         @id @default(uuid())
  role     MembershipRole @default(MEMBER) @map("role")
  userId   String         @map("user_id")
  user     User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  serverId String         @map("server_id")
  server   Server         @relation(fields: [serverId], references: [id], onDelete: Cascade)
  messages Message[]
  joinedAt DateTime       @default(now()) @map("joined_at")
  leftAt   DateTime?      @map("left_at")

  @@index([userId])
  @@index([serverId])
  @@map("members")
}

model Message {
  id      String  @id @default(uuid()) @map("id")
  content String  @map("content") @db.Text
  fileUrl String? @map("file_url") @db.Text

  channelId String  @map("channel_id")
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  memberId  String  @map("member_id")
  member    Member  @relation(fields: [memberId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@index([channelId])
  @@index([memberId])
  @@map("messages")
}

model Conversation {
  id String @id @default(uuid()) @map("id")
  createdAt DateTime @default(now()) @map("created_at")
  lastMessageAt DateTime @default(now()) @map("last_message_at")
  
  users User[]
  directMessages DirectMessage[]

  @@map("conversations")
}

model DirectMessage {
  id      String  @id @default(uuid()) @map("id")
  content String  @map("content") @db.Text
  fileUrl String? @map("file_url") @db.Text

  senderId   String @map("sender_id")
  sender     User   @relation(fields: [senderId], references: [id], onDelete: Cascade, name: "sender")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  readAt    DateTime? @map("read_at")
  deletedAt DateTime? @map("deleted_at")
  conversationId String @map("conversation_id")
  conversation  Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([senderId])
  @@index([conversationId])

  @@map("direct_messages")
}
